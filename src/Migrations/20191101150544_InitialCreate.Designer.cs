// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sampekey.Contex;

namespace sampekey.Migrations
{
    [DbContext(typeof(SampekeyDbContex))]
    [Migration("20191101150544_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("T_ROLE_CLAIM");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("T_USER_CLAIM");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("T_USER_LOGIN");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("T_USER_ROLE");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("T_USER_TOKEN");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<string>");
                });

            modelBuilder.Entity("Sampekey.Model.Administration.Permission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("KeyName");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("T_PERMISSION");
                });

            modelBuilder.Entity("Sampekey.Model.Configuration.Module.Castle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Class");

                    b.Property<string>("Description");

                    b.Property<string>("Icon");

                    b.Property<string>("KeyName");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("T_SYSTEM");
                });

            modelBuilder.Entity("Sampekey.Model.Configuration.Module.CastleLand", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("CastleId")
                        .HasColumnName("SystemId");

                    b.Property<string>("LandId")
                        .HasColumnName("ModuleId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id", "CastleId", "LandId");

                    b.HasIndex("CastleId");

                    b.HasIndex("LandId");

                    b.ToTable("T_SYSTEM_MODULES");
                });

            modelBuilder.Entity("Sampekey.Model.Configuration.Module.Kingdom", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("KeyName");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("T_ENVIROMENT");
                });

            modelBuilder.Entity("Sampekey.Model.Configuration.Module.KingdomCastleRolePermission", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("KingdomId")
                        .HasColumnName("EnviromentId");

                    b.Property<string>("CastleId")
                        .HasColumnName("SystemId");

                    b.Property<string>("RoleId");

                    b.Property<string>("PermissionId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id", "KingdomId", "CastleId", "RoleId", "PermissionId");

                    b.HasIndex("CastleId");

                    b.HasIndex("KingdomId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("T_ENVIROMENT_SYSTEM_ROLE_PERMISSION");
                });

            modelBuilder.Entity("Sampekey.Model.Configuration.Module.Land", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Class");

                    b.Property<string>("Description");

                    b.Property<string>("Icon");

                    b.Property<string>("KeyName");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("T_MODULES");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("T_ROLE");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("userFromActiveDirectory");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("T_USER");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.RoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>");

                    b.ToTable("T_ROLE_CLAIM");

                    b.HasDiscriminator().HasValue("RoleClaim");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.UserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.ToTable("T_USER_CLAIM");

                    b.HasDiscriminator().HasValue("UserClaim");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.UserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>");

                    b.ToTable("T_USER_LOGIN");

                    b.HasDiscriminator().HasValue("UserLogin");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasIndex("RoleId");

                    b.ToTable("T_USER_ROLE");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.UserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>");

                    b.ToTable("T_USER_TOKEN");

                    b.HasDiscriminator().HasValue("UserToken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Sampekey.Model.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sampekey.Model.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sampekey.Model.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sampekey.Model.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sampekey.Model.Configuration.Module.CastleLand", b =>
                {
                    b.HasOne("Sampekey.Model.Configuration.Module.Castle", "Castle")
                        .WithMany("CastleLands")
                        .HasForeignKey("CastleId");

                    b.HasOne("Sampekey.Model.Configuration.Module.Land", "Land")
                        .WithMany("CastleLands")
                        .HasForeignKey("LandId");
                });

            modelBuilder.Entity("Sampekey.Model.Configuration.Module.KingdomCastleRolePermission", b =>
                {
                    b.HasOne("Sampekey.Model.Configuration.Module.Castle", "Castle")
                        .WithMany("KingdomCastleRolePermissions")
                        .HasForeignKey("CastleId");

                    b.HasOne("Sampekey.Model.Configuration.Module.Kingdom", "Kingdom")
                        .WithMany("KingdomCastleRolePermissions")
                        .HasForeignKey("KingdomId");

                    b.HasOne("Sampekey.Model.Administration.Permission", "Permission")
                        .WithMany("KingdomCastleRolePermissions")
                        .HasForeignKey("PermissionId");

                    b.HasOne("Sampekey.Model.Identity.Role", "Role")
                        .WithMany("KingdomCastleRolePermissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Sampekey.Model.Identity.UserRole", b =>
                {
                    b.HasOne("Sampekey.Model.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Sampekey.Model.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
